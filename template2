# -*- coding: utf-8 -*-
"""
Created on Fri Mar 29 09:40:30 2019

@author: sarah.du
"""

import torch
import torch.nn as nn
import torch.nn.functional as F 
import torch.optim as optim

import os

import pandas as pd
import numpy as np

# import matplotlib.pyplot as plt
from torch.utils.data import Dataset, DataLoader, random_split, Subset
from torchvision import transforms, utils
from tensorboardX import SummaryWriter
from torch import randperm

 
#file1 = 'C:\\Users\\sarah.du\\OneDrive - AIMCo\\Desktop\\Test\\input.csv' # read position
#file2 = 'C:\\Users\\sarah.du\\OneDrive - AIMCo\\Desktop\\Test\\output.csv'
file1 = './inputs.csv'
file2 = './outputs.csv'
 
InputData = pd.read_csv(file1)
TargetData = pd.read_csv(file2)


Combination = pd.merge(InputData, TargetData, how='inner', on = 'Date')

train_size = int(0.8*len(Combination))  # 80% training data
test_size = len(Combination) - train_size


class Net(nn.Module):
  def __init__(self):
    super(Net, self).__init__()
    self.fc1 = nn.Linear(2,128)
    self.fc2 = nn.Linear(128, 64)
    self.fc3 = nn.Linear(64, 1)
  
  def forward(self, x):
    x = F.sigmoid(self.fc1(x))
    x = F.sigmoid(self.fc2(x))
    x = self.fc3(x)
    return x
 
def train(model, optimizer, train_size):
  model.train()
  train= Combination.iloc[0:train_size,:]

  for i in range(0,len(train)):
    data = torch.tensor(train.iloc[i,1:3].astype(np.float32))
    target = torch.tensor(train.iloc[i,3].astype(np.float32))
    optimizer.zero_grad()
    output = model(data)
    loss = F.mse_loss(output, target)  ##mse_loss = ((input-target)**2).mean()
    loss.backward()
    optimizer.step()

savedata=[]


def test(model, test_size):
  model.eval()
  test_loss = 0
  with torch.no_grad():
    test = Combination.iloc[train_size:train_size+test_size,:]
    

    for i in range(0,len(test)):
      data = torch.tensor(test.iloc[i,1:3].astype(np.float32))
      target = torch.tensor(test.iloc[i,3].astype(np.float32))
      output = model(data)
      test_loss += F.mse_loss(output, target).item()
  test_loss /= test_size
  savedata.append(float(test_loss))
  print('\nTest set: average loss: {:.4f}\n'.format(test_loss))
  return test_loss


model = Net()

optimizer = optim.Adagrad(model.parameters())


prev_loss = 100000000
for epoch in range(300):
  train(model, optimizer, train_size)
  test_loss = test(model, test_size)
  if test_loss < prev_loss:
    torch.save(model.state_dict(), './best_model.mod')



model.load_state_dict(torch.load('./best_model.mod'))
print('best test loss:', test(model, 300))
